{
  "openapi": "3.0.1",
  "info": {
    "title": "Robot Controller API",
    "description": "REST API for controlling and documenting moon robots.",
    "contact": {
      "name": "Rathanak Sambo",
      "email": "s223161551@deakin.edu.au"
    }
  },
  "paths": {
    "/api/maps": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Retrieves all maps",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Map"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Map"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Map"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Maps"
        ],
        "summary": "Creates a new map",
        "description": "Sample request:\r\n\r\n    POST /api/maps\r\n    {\r\n      \"name\": \"TestMap\",\r\n      \"description\": \"Testing layout\",\r\n      \"columns\": 4,\r\n      \"rows\": 4,\r\n      \"isSquare\": true\r\n    }",
        "requestBody": {
          "description": "The map object to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Map"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Map"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Map"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Map successfully created"
          },
          "400": {
            "description": "Invalid map data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/maps/square": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "gets all square maps where the columns == row",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Map"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Map"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Map"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/maps/{id}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "gets a map by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the map",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Map found"
          },
          "404": {
            "description": "Map not found"
          }
        }
      },
      "put": {
        "tags": [
          "Maps"
        ],
        "summary": "Updates an existing map",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the map to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated map object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Map"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Map"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Map"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Update successful"
          },
          "404": {
            "description": "Map not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Update failed on the server"
          }
        }
      },
      "delete": {
        "tags": [
          "Maps"
        ],
        "summary": "Deletes a map by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the map to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Map successfully deleted"
          },
          "404": {
            "description": "Map not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Deletion failed on the server"
          }
        }
      }
    },
    "/api/maps/{id}/{x}-{y}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Checks whether a coordinate (x, y) is inside the map bound",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the map",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "x",
            "in": "path",
            "description": "The x coordinate",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "y",
            "in": "path",
            "description": "The y coordinate",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coordinate check result"
          },
          "400": {
            "description": "Invalid coordinate values"
          },
          "404": {
            "description": "Map not found"
          }
        }
      }
    },
    "/api/robot-commands": {
      "get": {
        "tags": [
          "RobotCommands"
        ],
        "summary": "Get all the robot commands.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotCommand"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotCommand"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotCommand"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "RobotCommands"
        ],
        "summary": "Creates a robot command.",
        "description": "Sample request:\r\n\r\n    POST /api/robot-commands\r\n    {\r\n      \"name\": \"RUN\",\r\n      \"isMoveCommand\": true,\r\n      \"description\": \"Salsa on the Moon\"\r\n    }",
        "requestBody": {
          "description": "The robot command object from the client.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RobotCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RobotCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RobotCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created"
          },
          "400": {
            "description": "Invalid request payload",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate command name",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/robot-commands/move": {
      "get": {
        "tags": [
          "RobotCommands"
        ],
        "summary": "Get only the robot commands that are move based.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotCommand"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotCommand"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RobotCommand"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/robot-commands/{id}": {
      "get": {
        "tags": [
          "RobotCommands"
        ],
        "summary": "Retrieves a specific robot command by its ID.",
        "operationId": "GetRobotCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the robot command.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Robot command found."
          },
          "404": {
            "description": "Robot command not found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "RobotCommands"
        ],
        "summary": "Updates an existing robot command by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the command to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated Robotcommand.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RobotCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RobotCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RobotCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully updated"
          },
          "404": {
            "description": "Command not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Update failed due to server error"
          }
        }
      },
      "delete": {
        "tags": [
          "RobotCommands"
        ],
        "summary": "Deletes robot command by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the command to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "404": {
            "description": "Command not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Delete failed due to server error"
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "RobotControllerAPI"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Map": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "columns": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "isSquare": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "RobotCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isMoveCommand": {
            "type": "boolean"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      }
    }
  }
}